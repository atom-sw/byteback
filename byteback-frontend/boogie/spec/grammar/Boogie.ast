// Root node
//
// A Boogie program is composed of a set of declarations.
Program ::= Declaration*;

// Node declaring a new symbol.
Declarator ::= <Name:String>;

// Node accessing a declared symbol.
Accessor ::= <Name:String>;

// Binding
//
// A binding can be used to declare a variable of a specific type.
abstract Binding ::= TypeAccess /Variable*/;

SetBinding : Binding ::= Declarator*;

OptionalBinding : Binding ::= [Declarator];

BoundedBinding : SetBinding ::= [WhereClause];

WhereClause ::= Expression;

// Type access
abstract TypeAccess;

BooleanTypeAccess : TypeAccess;

IntegerTypeAccess : TypeAccess;

RealTypeAccess : TypeAccess;

BitvectorTypeAccess : TypeAccess ::= <Definition:String>;

UnknownTypeAccess : TypeAccess ::= Accessor Argument:TypeAccess*;

MapTypeAccess : TypeAccess ::= TypeParameter* KeyType:TypeAccess* ValueType:TypeAccess;

// Option
//
// Some entities in Boogie can be annotated using a set of
// options. Every declaration in the program can be associated with a
// set of attributes, while trigger expressions are reserved for
// quantifiers.
abstract Option;

Attribute : Option ::= <Name:String> Argument:Expression*;

Trigger : Option ::= Expression*;

// Declaration
//
// A declaration always must always correlate to a set of declarators.
abstract Declaration ::= Attribute*;

// Signature
//
// Signature nodes for functions, procedures and implementations.
abstract Signature ::= TypeParameter*;

FunctionSignature : Signature ::= InputBinding:OptionalBinding* OutputBinding:OptionalBinding;

ProcedureSignature : Signature ::= InputBinding:BoundedBinding* OutputBinding:BoundedBinding*;

ImplementationSignature : Signature ::= InputBinding:SetBinding* OutputBinding:SetBinding*;

// Type declaration
abstract TypeDeclaration : Declaration ::= Declarator TypeParameter* /TypeDefinition/;

TypeConstructorDeclaration : TypeDeclaration ::= <Finite:Boolean>;

TypeSynonymDeclaration : TypeDeclaration ::= Aliased:TypeAccess;

TypeParameter ::= Declarator;

// Axiom declaration
AxiomDeclaration : Declaration ::= Expression;

// Function declaration
FunctionDeclaration : Declaration ::= Declarator Signature:FunctionSignature [Expression] /Function/;

// Constant declaration
ConstantDeclaration : Declaration ::= Binding:SetBinding <Unique:Boolean> [OrderSpecification];

OrderSpecification ::= ParentEdge* <Complete:Boolean>;

ParentEdge ::= ParentConstant:Accessor <Unique:Boolean>;

// Variable declaration
VariableDeclaration : Declaration ::= Binding:BoundedBinding*;

// Procedure declaration
ProcedureDeclaration : Declaration ::= Declarator Signature:ProcedureSignature Specification* [Body] /Procedure/;

// Implementation declaration
ImplementationDeclaration : Declaration ::= Declarator Signature:ImplementationSignature Body* /Implementation/;

Body ::= LocalDeclaration:VariableDeclaration* Statement*;

// Expressions
abstract Meta;

Star : Meta;

abstract Expression : Meta;

abstract Conditional : Expression;

abstract BinaryExpression : Expression ::= LeftOperand:Expression RightOperand:Expression;

abstract UnaryExpression: Expression ::= Operand:Expression;

CoercionOperation : UnaryExpression ::= Target:TypeAccess;

// If-Then expression
ConditionalOperation : Expression ::= Condition:Expression Then:Expression Else:Expression;

// Boolean expressions
EquivalenceOperation : BinaryExpression;

ImplicationOperation : BinaryExpression;

OrOperation : BinaryExpression;

AndOperation : BinaryExpression;

NegationOperation : UnaryExpression;

// Relational expressions
EqualsOperation : BinaryExpression;

NotEqualsOperation : BinaryExpression;

LessThanOperation : BinaryExpression;

GreaterThanOperation : BinaryExpression;

LessThanEqualsOperation : BinaryExpression;

GreaterThanEqualsOperation : BinaryExpression;

PartialOrderOperation : BinaryExpression;

// Arithmetic expressions
AdditionOperation : BinaryExpression;

SubtractionOperation : BinaryExpression;

MultiplicationOperation : BinaryExpression;

RealDivisionOperation : BinaryExpression;

IntegerDivisionOperation : BinaryExpression;

ModuloOperation : BinaryExpression;

MinusOperation : UnaryExpression;

// Bitvector expressions
ConcatenationOperation : BinaryExpression;

// Map expressions
abstract MapOperation : UnaryExpression;

MapAccessOperation : MapOperation ::= Select:MapSelect;

MapRangedAccessOperation : MapOperation ::= <RangeStart:NumberLiteral> <RangeEnd:NumberLiteral>;

MapUpdateOperation : MapAccessOperation ::= Update:Expression;

MapSelect ::= Expression*;

// Symbolic reference
abstract SymbolicReference : Expression ::= Accessor;

ValueReference : SymbolicReference;

FunctionReference : SymbolicReference ::= Argument:Expression*;

// Old reference
OldReference : Expression ::= Argument:Expression;

// Casting references
abstract ConversionReference : Expression ::= Argument:Expression;

IntConversionReference : ConversionReference;

RealConversionReference : ConversionReference;

// Quantifier expression
QuantifierExpression : UnaryExpression ::= Quantifier TypeParameter* Binding:SetBinding* Option*;

abstract Quantifier;

UniversalQuantifier : Quantifier;

ExistentialQuantifier : Quantifier;

// Literal expressions
abstract Literal : Expression ::= <Value:String>;

NumberLiteral : Literal;

BitvectorLiteral : Literal;

StringLiteral : Literal;

BooleanLiteral : Literal;

RealLiteral : Literal;

// Statements
abstract Statement;

AssertStatement : Statement ::= Attribute* Expression;

AssumeStatement : Statement ::= Expression;

HavocStatement : Statement ::= Reference:SymbolicReference*;

AssignmentStatement : Statement ::= Target:Assignee Source:Expression;

Assignee ::= Accessor;

MapAssignee : Assignee ::= Select:MapSelect;

abstract CallStatement : Statement ::= Accessor;

TargetedCallStatement : CallStatement ::= Target:ValueReference* Argument:Expression*;

UniversalCallStatement : CallStatement ::= Argument:Meta*;

IfStatement : Statement ::= Condition:Meta Then:BlockStatement [Else:BlockStatement];

WhileStatement : Statement ::= Condition:Meta Block:BlockStatement Invariant:LoopInvariant*;

BreakStatement : Statement ::= [Target:Label];

ReturnStatement : Statement;

BlockStatement : Statement ::= Statement*;

ExtensionPoint : BlockStatement;

GotoStatement : Statement ::= Label;

LabelStatement : Statement ::= Label;

Label ::= <Target:String>;

// Specifications
abstract Specification ::= Attribute* <Free:Boolean>;

abstract Condition : Specification ::= Expression;

PreCondition : Condition;

PostCondition : Condition;

LoopInvariant : Condition; 

FrameCondition : Specification ::= Reference:ValueReference*;
