Meta meta
    = expression
    | star
    ;

Star star
    = TIMES
    {: return new Star(); :}
    ;

List meta_comma_list
    = meta.m
    {: return new List(m); :}
    | meta_comma_list.ml COMMA meta.m
    {: return ml.add(m); :}
    ;

Expression expression
    = expression0.e
    {: return e; :}
    | conditional_operation.e
    {: return e; :}
    ;

ConditionalOperation conditional_operation
    = IF expression.c THEN expression.e1 ELSE expression.e2
    {: return new ConditionalOperation(c, e1, e2); :}
    ;

List expression_comma_list
    = expression.e
    {: return new List(e); :}
    | expression_comma_list.el COMMA expression.e
    {: return el.add(e); :}
    ;

Expression expression0
    = expression1.e
    {: return e; :}
    | equivalence_operation.o
    {: return o; :}
    ;

EquivalenceOperation equivalence_operation
    = expression1.lhs IFF expression0.rhs
    {: return new EquivalenceOperation(lhs, rhs); :}
    ;

Expression expression1
    = expression2.e
    {: return e; :}
    | implication_operation.o
    {: return o; :}
    ;

ImplicationOperation implication_operation
    = expression2.lhs IMPLIES expression1.rhs
    {: return new ImplicationOperation(lhs, rhs); :}
    ;

Expression expression2
    = expression3.e
    {: return e; :}
    | or_operation.o
    {: return o; :}
    | and_operation.o
    {: return o; :}
    ;

OrOperation or_operation
    = expression3.lhs OR expression2.rhs
    {: return new OrOperation(lhs, rhs); :}
    ;

AndOperation and_operation
    = expression3.lhs AND expression2.rhs
    {: return new AndOperation(lhs, rhs); :}
    ;

Expression expression3
    = expression4.e
    {: return e; :}
    | relational_operation.o
    {: return o; :}
    ;

Expression relational_operation
    = equals_operation.o
    {: return o; :}
    | not_equals_operation.o
    {: return o; :}
    | less_than_operation.o
    {: return o; :}
    | greater_than_operation.o
    {: return o; :}
    | less_than_equals_operation.o
    {: return o; :}
    | greater_than_equals_operation.o
    {: return o; :}
    | partial_order_operation.o
    {: return o; :}
    ;

Expression equals_operation
    = expression4.lhs EQUALS expression4.rhs
    {: return new EqualsOperation(lhs, rhs); :}
    ;

Expression not_equals_operation
    = expression4.lhs NEQ expression4.rhs
    {: return new NotEqualsOperation(lhs, rhs); :}
    ;

Expression less_than_operation
    = expression4.lhs LT expression4.rhs
    {: return new LessThanOperation(lhs, rhs); :}
    ;

Expression greater_than_operation
    = expression4.lhs GT expression4.rhs
    {: return new GreaterThanOperation(lhs, rhs); :}
    ;

Expression less_than_equals_operation
    = expression4.lhs LTEQ expression4.rhs
    {: return new LessThanEqualsOperation(lhs, rhs); :}
    ;

Expression greater_than_equals_operation
    = expression4.lhs GTEQ expression4.rhs
    {: return new GreaterThanEqualsOperation(lhs, rhs); :}
    ;

Expression partial_order_operation
    = expression4.lhs PARTORDER expression4.rhs
    {: return new PartialOrderOperation(lhs, rhs); :}
    ;

Expression expression4
    = expression5.e
    {: return e; :}
    | concatenation_operation.o
    {: return o; :}
    ;

ConcatenationOperation concatenation_operation
    = expression4.lhs CONCAT expression5.rhs
    {: return new ConcatenationOperation(lhs, rhs); :}
    ;

Expression expression5
    = expression6.e
    {: return e; :}
    | addition_operation.o
    {: return o; :}
    ;

Expression addition_operation
    = expression5.lhs PLUS expression6.rhs
    {: return new AdditionOperation(lhs, rhs); :}
    | expression5.lhs MINUS expression6.rhs
    {: return new SubtractionOperation(lhs, rhs); :}
    ;

Expression expression6
    = expression7.e
    {: return e; :}
    | multiplication_operation.o
    {: return o; :}
    | division_operation.o
    {: return o; :}
    | modulo_operation.o
    {: return o; :}
    ;

MultiplicationOperation multiplication_operation
    = expression6.lhs TIMES expression7.rhs
    {: return new MultiplicationOperation(lhs, rhs); :}
    ;

Expression division_operation
    = expression6.lhs DIVIDE expression7.rhs
    {: return new RealDivisionOperation(lhs, rhs); :}
    | expression6.lhs DIV expression7.rhs
    {: return new IntegerDivisionOperation(lhs, rhs); :}
    ;

ModuloOperation modulo_operation
    = expression6.lhs MOD expression7.rhs
    {: return new ModuloOperation(lhs, rhs); :}
    ;

Expression expression7
    = expression8.e
    {: return e; :}
    | unary_expression.o
    {: return o; :}
		| coercion_operation.o
		{: return o; :}
    ;

CoercionOperation coercion_operation
		= expression8.e COLON type.a
		{: return new CoercionOperation(e, a); :}
		;

UnaryExpression unary_expression
    = negation_operation.o
    {: return o; :}
    | minus_operation.o
    {: return o; :}
    ;

NegationOperation negation_operation
    = NOT expression7.e
    {: return new NegationOperation(e); :}
    ;

MinusOperation minus_operation
    = MINUS expression7.e
    {: return new MinusOperation(e); :}
    ;

Expression expression8
    = expression9.e
    {: return e; :}
    | map_expression.o
    {: return o; :}
    ;

MapOperation map_expression
    = expression8.op LBRACKET map_operation.mo RBRACKET
    {:
       mo.setOperand(op);
       return mo;
    :}
    ;

MapOperation map_operation
    = map_access_operation.o
    {: return o; :}
    | map_ranged_access_operation.o
    {: return o; :}
    | map_update_operation.o
    {: return o; :}
    ;

MapAccessOperation map_access_operation
    = expression_comma_list.el
    {: return new MapAccessOperation(null, new MapSelect(el)); :}
    ;

MapAccessOperation map_ranged_access_operation
    = number_literal.a COLON number_literal.b
    {: return new MapRangedAccessOperation(null, a, b); :}
    ;

MapAccessOperation map_update_operation
    = expression_comma_list.el COLONEQ expression.ue
    {: return new MapUpdateOperation(null, new MapSelect(el), ue); :}
    ;

Expression expression9
    = literal.l
    {: return l; :}
    | symbolic_reference.r
    {: return r; :}
    | old_reference.o
    {: return o; :}
    | LPAREN quantifier_expression.qe RPAREN
    {: return qe; :}
    | LPAREN expression.e RPAREN
    {: return e; :}
    ;

QuantifierExpression quantifier_expression
    = universal_quantifier_expression.q
    {: return q; :}
    | existential_quantifier_expression.q
    {: return q; :}
    ;

QuantifierExpression universal_quantifier_expression
    = FORALL quantifier_definition.e
    {:
       e.setQuantifier(new UniversalQuantifier());
       return e;
    :}
    ;

QuantifierExpression existential_quantifier_expression
    = EXISTS quantifier_definition.e
    {:
       e.setQuantifier(new ExistentialQuantifier());
       return e;
    :}
    ;

QuantifierExpression quantifier_definition
    = type_parameter_block_list.tdl? set_binding_comma_list.bl QSEP option_list.ol? expression.e
    {: return new QuantifierExpression(e, null, tdl, bl, ol); :}
    ;

Expression symbolic_reference
    = value_reference.r
    {: return r; :}
    | function_reference.r
    {: return r; :}
		| conversion_reference.r
	  {: return r; :}
    ;

ValueReference value_reference
    = accessor.a
    {: return new ValueReference(a); :}
    ;

FunctionReference function_reference
    = accessor.a LPAREN expression_comma_list.el? RPAREN
    {: return new FunctionReference(a, el); :}
    ;

ConversionReference conversion_reference
		= INT LPAREN expression.e RPAREN
	  {: return new IntConversionReference(e); :}
		| REAL LPAREN expression.e RPAREN
	  {: return new RealConversionReference(e); :}
		;

OldReference old_reference
    = OLD LPAREN expression.e RPAREN
    {: return new OldReference(e); :}
    ;

Literal literal
    = boolean_literal.l
    {: return l; :}
    | number_literal.l
    {: return l; :}
    | real_literal.l
    {: return l; :}
    | bitvector_literal.l
    {: return l; :}
    ;

BooleanLiteral boolean_literal
    = TRUE.n
    {: return BooleanLiteral.makeTrue(); :}
    | FALSE.n
    {: return BooleanLiteral.makeFalse(); :}
    ;

NumberLiteral number_literal
    = NUMBER.n
    {: return new NumberLiteral(n); :}
    ;

RealLiteral real_literal
    = REALNUMBER.n
    {: return new RealLiteral(n); :}
    ;

BitvectorLiteral bitvector_literal
    = BITVECTOR.bv
    {: return new BitvectorLiteral(bv); :}
    ;