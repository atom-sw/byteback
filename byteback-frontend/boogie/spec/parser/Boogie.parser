%header {:
    package byteback.frontend.boogie.parser;
    import byteback.frontend.boogie.ast.*;
:};

%goal program;

Program program
    = declaration_list.dl?
    {: return new Program(dl); :}
    ;

Declarator declarator
    = ID.n
    {: return new Declarator(n); :}
    ;

List declarator_comma_list
    = declarator.d
    {: return new List(d); :}
    | declarator_comma_list.dl COMMA declarator.d
    {: return dl.add(d); :}
    ;

SetBinding set_binding
    = declarator_comma_list.dl COLON type.t
    {: return new SetBinding(t, dl); :}
    ;

List set_binding_comma_list
    = set_binding.b
    {: return new List(b); :}
    | set_binding_comma_list.bl COMMA set_binding.b
    {: return bl.add(b); :}
    ;

OptionalBinding optional_binding
    = unused_binding.b
    {: return b; :}
    | used_binding.b
    {: return b; :}
    ;

List optional_binding_comma_list
    = optional_binding.b
    {: return new List(b); :}
    | optional_binding_comma_list.bl COMMA optional_binding.b
    {: return bl.add(b); :}
    ;

OptionalBinding used_binding
    = declarator.d COLON unused_binding.b
    {:
       b.setDeclarator(d);
       return b;
    :}
    ;

OptionalBinding unused_binding
    = type.t
    {: return new OptionalBinding(t, new Opt()); :}
    ;

List bounded_binding_comma_list
    = bounded_binding.b
    {: return new List(b); :}
    | bounded_binding_comma_list.bl COMMA bounded_binding.b
    {: return bl.add(b); :}
    ;

BoundedBinding bounded_binding
    = declarator_comma_list.dl COLON type.t where_clause.wc?
    {: return new BoundedBinding(t, dl, wc); :}
    ;

WhereClause where_clause
    = WHERE expression.e
    {: return new WhereClause(e); :}
    ;

Accessor accessor
    = ID.n
    {: return new Accessor(n); :}
    ;