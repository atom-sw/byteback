Option option
		= attribute.a
		{: return a; :}
		| trigger.r
		{: return r; :}
		;

List option_list
		= option.o
		{: return new List(o); :}
		| option_list.ol option.o
		{: return ol.add(o); :}
		;

Trigger trigger
		= LBRACE expression_comma_list.el RBRACE
		{: return new Trigger(el); :}
		;

Attribute attribute
		= LBRACE COLON ID.i expression_comma_list.el? RBRACE
		{: return new Attribute(i, el); :}
		;

List attribute_list
		= attribute.a
		{: return new List(a); :}
		| attribute_list.al attribute.a
		{: return al.add(a); :}
		;

Declaration declaration
		= type_declaration.d
		{: return d; :}
		| constant_declaration.d
		{: return d; :}
		| axiom_declaration.d
		{: return d; :}
		| function_declaration.d
		{: return d; :}
		| variable_declaration.d
		{: return d; :}
		| procedure_declaration.d
		{: return d; :}
		| implementation_declaration.d
		{: return d; :}
		;

List declaration_list
		= declaration.d
		{: return new List(d); :}
		| declaration_list.dl declaration.d
		{: return dl.add(d); :}
		;

TypeDeclaration type_declaration
		= TYPE attribute_list.al? type_definition.td SEMICOLON
		{:
			 td.setAttributeList(al);
			 return td;
		:}
		;

TypeDeclaration type_definition
		= type_constructor_definition.td
		{: return td; :}
		| finite_type_constructor_definition.td
		{: return td; :}
		| type_synonym_definition.td
		{: return td; :}
		;

TypeConstructorDeclaration finite_type_constructor_definition
		= FINITE type_constructor_definition.d
		{:
			 d.setFinite(true);
			 return d;
		:}
		;

TypeConstructorDeclaration type_constructor_definition
		= declarator.d type_parameter_list.tpl?
		{: return new TypeConstructorDeclaration(new List(), d, tpl, false); :}
		;

TypeSynonymDeclaration type_synonym_definition
		= declarator.d type_parameter_list.tpl? EQUALS type.t
		{: return new TypeSynonymDeclaration(new List(), d, tpl, t); :}
		;

ConstantDeclaration constant_declaration
		= CONST attribute_list.al? constant_definition.cd SEMICOLON
		{:
			 cd.setAttributeList(al);
			 return cd;
		:}
		;

ConstantDeclaration constant_definition
		= standard_constant_definition.cd
		{: return cd; :}
		| unique_constant_definition.cd
		{: return cd; :}
		;

ConstantDeclaration standard_constant_definition
		= set_binding.b order_specification.os?
		{: return new ConstantDeclaration(new List(), b, false, os); :}
		;

ConstantDeclaration unique_constant_definition
		= UNIQUE standard_constant_definition.cd
		{:
			 cd.setUnique(true);
			 return cd;
		:}
		;

OrderSpecification order_specification
		= standard_order_specification.os
		{: return os; :}
		| complete_order_specification.os
		{: return os; :}
		;

OrderSpecification standard_order_specification
		= parent_info.os
		{: return os; :}
		;

OrderSpecification complete_order_specification
		= standard_order_specification.os COMPLETE
		{:
			 os.setComplete(true);
			 return os;
		:}
		;

OrderSpecification parent_info
		= PARTORDER parent_edge_comma_list.pl
		{: return new OrderSpecification(pl, false); :}
		;

ParentEdge parent_edge
		= standard_parent_edge.pe
		{: return pe; :}
		| unique_parent_edge.pe
		{: return pe; :}
		;

ParentEdge unique_parent_edge
		= UNIQUE standard_parent_edge.e
		{:
			 e.setUnique(true);
			 return e;
		:}
		;

ParentEdge standard_parent_edge
		= accessor.a
		{: return new ParentEdge(a, false); :}
		;

List parent_edge_comma_list
		= parent_edge.e
		{: return new List(e); :}
		| parent_edge_comma_list.el COMMA parent_edge.e
		{: return el.add(e); :}
		;

AxiomDeclaration axiom_declaration
		= AXIOM attribute_list.al? expression.e SEMICOLON
		{: return new AxiomDeclaration(al, e); :}
		;

FunctionDeclaration function_declaration
		= FUNCTION attribute_list.al? declarator.d function_definition.fd
		{:
			 fd.setAttributeList(al);
			 fd.setDeclarator(d);
			 return fd;
		:}
		;

FunctionDeclaration function_definition
		= function_prototype.fd SEMICOLON
		{: return fd; :}
		| function_body.fb
		{: return fb; :}
		;

FunctionDeclaration function_body
		= function_prototype.fd LBRACE expression.e RBRACE
		{:
			 fd.setExpression(e);
			 return fd;
		:}
		;

FunctionDeclaration function_prototype
		= function_signature.fs
		{: return new FunctionDeclaration(new List(), null, fs, new Opt()); :}
		;

FunctionSignature function_signature
		= type_parameter_block_list.tdl? LPAREN optional_binding_comma_list.bl RPAREN RETURNS LPAREN optional_binding.b RPAREN
		{: return new FunctionSignature(tdl, bl, b); :}
		;

VariableDeclaration variable_declaration
		= VAR attribute_list.al? bounded_binding_comma_list.bl SEMICOLON
		{: return new VariableDeclaration(al, bl); :}
		;

ProcedureDeclaration procedure_declaration
		= PROCEDURE attribute_list.al? declarator.d procedure_definition.pd
		{:
			 pd.setAttributeList(al);
			 pd.setDeclarator(d);
			 return pd;
		:}
		;

ProcedureDeclaration procedure_definition
		= procedure_signature.ps SEMICOLON specification_list.sl?
		{: return new ProcedureDeclaration(new List(), null, ps, sl, new Opt()); :}
		| procedure_signature.ps specification_list.sl? body_block.b
		{: return new ProcedureDeclaration(new List(), null, ps, sl, new Opt(b)); :}
		;

ProcedureSignature procedure_signature
		= type_parameter_block_list.tdl? LPAREN bounded_binding_comma_list.bli? RPAREN procedure_out_parameters.blo?
		{: return new ProcedureSignature(tdl, bli, blo); :}
		;

List procedure_out_parameters
		= RETURNS LPAREN bounded_binding_comma_list.blo? RPAREN
		{: return blo; :}
		;

ImplementationDeclaration implementation_declaration
		= IMPLEMENTATION attribute_list.al? declarator.d implementation_definition.id
		{:
			 id.setAttributeList(al);
			 id.setDeclarator(d);
			 return id;
		:}
		;

ImplementationDeclaration implementation_definition
		= implementation_signature.s body_list.bl?
		{: return new ImplementationDeclaration(new List(), null, s, bl); :}
		;

ImplementationSignature implementation_signature
		= type_parameter_block_list.dl? LPAREN set_binding_comma_list.bli? RPAREN implementation_out_parameters.blo?
		{: return new ImplementationSignature(dl, bli, blo); :}
		;

List implementation_out_parameters
		= RETURNS LPAREN set_binding_comma_list.blo RPAREN
		{: return blo; :}
		;

Specification specification
		= standard_specification.s SEMICOLON
		{: return s; :}
		| free_specification.s SEMICOLON
		{: return s; :}
		;

List specification_list
		= specification.s
		{: return new List(s); :}
		| specification_list.sl specification.s
		{: return sl.add(s); :}
		;

Specification free_specification
		= FREE standard_specification.s
		{: s.setFree(true); :}
		;

Specification standard_specification
		= requires_specification.s
		{: return s; :}
		| modifies_specification.s
		{: return s; :}
		| ensures_specification.s
		{: return s; :}
		;

PreCondition requires_specification
		= REQUIRES attribute_list.al? expression.e
		{: return new PreCondition(al, false, e); :}
		;

PostCondition ensures_specification
    = ENSURES attribute_list.al? expression.e
    {: return new PostCondition(al, false, e); :}
    ;

FrameCondition modifies_specification
    = MODIFIES attribute_list.al? value_reference_comma_list.rl
    {: return new FrameCondition(al, false, rl); :}
    ;
