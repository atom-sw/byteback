import java.util.Optional;
import java.util.LinkedList;

/**
 * Methods and collections related to {@link Function} entities.
 */
aspect Function {

  /**
   * Functions defined in the program.
   */
  coll EntityTable<Function> Program.functions();

  FunctionDeclaration contributes
    getFunction() to Program.functions();

  /**
   * Lookup a {@link Function} from its {@link Accessor}.
   *
   * @param name The name of the function
   * @return The function associated to this name.
   */
  inh lazy Optional<Function> Accessor.lookupFunction(String name);

  eq Program.getChild().lookupFunction(String name) = lookupFunction(name);

  /**
   * Lookup a function by the accessor's name.
   *
   * @see #lookupFunction(String)
   */
  syn lazy Optional<Function> Accessor.lookupFunction();

  eq Accessor.lookupFunction() = lookupFunction(getName());

  /**
   * Lookup a function in this program by its name.
   *
   * @see Accessor#lookupFunction(String)
   */
  syn lazy Optional<Function> Program.lookupFunction(String name);

  eq Program.lookupFunction(String name) = functions().getFirst(name);

  /**
   * NTA definition of the {@link Function} field.
   */
  syn nta Function FunctionDeclaration.getFunction();

  eq FunctionDeclaration.getFunction() = new Function(getDeclarator());

  /**
   * Get declaration from function entity.
   *
   * @see Entity#getDeclaration()
   */
  inh lazy FunctionDeclaration Function.getFunctionDeclaration();

  eq FunctionDeclaration.getChild().getFunctionDeclaration() = this;

  /**
   * Creates a function reference with unbound arguments.
   *
   * @return A new {@link FunctionReference} to this function.
   */
  syn FunctionReference Function.makeFunctionReference();

  eq Function.makeFunctionReference() = new FunctionReference(getDeclarator().makeAccessor(), new List<>());

  /**
   * Inline a function to a set of arguments.
   * 
   * Note that this function does not perform any kind of
   * type-checking to its arguments.
   *
   * @param arguments The arguments with which the function will be
   * inlined.
   */
  syn Expression Function.inline(List<Expression> arguments);

  eq Function.inline(List<Expression> arguments) {
    final FunctionDeclaration declaration = getFunctionDeclaration().rootedCopy();

    for (Variable variable : declaration.getFunction().variables()) {
      if (arguments.getNumChild() == 0) {
        throw new IllegalArgumentException("Argument count does not match");
      }

      final Expression argument = arguments.getChild(0);
      arguments.removeChild(0);

      for (ValueReference reference : variable.references()) {
        final ASTNode parent = reference.getParent();
        final int index = parent.getIndexOfChild(reference);
        parent.setChild(argument.fullCopy(), index);
      }
    }

    final Expression inlinedExpression = declaration.getExpression();
    inlinedExpression.setParent(null);

    return inlinedExpression;
  }

  /**
   * Inline at callsite.
   *
   * Inlines a callsite with {@link Function#inline} with the
   * arguments provided in this {@link FunctionReference}.
   */
  syn Expression FunctionReference.inline();

  eq FunctionReference.inline() = getAccessor().lookupFunction()
    .orElseThrow(() -> new RuntimeException("Cannot inline an unresolved function reference"))
    .inline(getArgumentList());

}
