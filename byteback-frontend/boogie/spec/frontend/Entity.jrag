import java.util.Optional;
import java.util.Collection;
import java.util.LinkedList;

/**
 * Methods and data-structures related to high-level code entities.
 *
 * @see Variable
 * @see Function
 * @see Procedure
 * @see Implementation
 * @see TypeDefinition
 */
aspect Entity {

  /**
   * Table associating names to code entities.
   */
  public class EntityTable<T extends Entity> extends LinkedList<T> {

    public EntityTable() {
      super();
    }

    /**
     * Get first entity matching a name.
     *
     * @param name The name to be matched.
     * @return The first matching entity.
     */
    public Optional<T> getFirst(String name) {
      for (T entity : this) {
        if (entity.getName().equals(name)) {
          return Optional.of(entity);
        }
      }

      return Optional.empty();
    }

    /**
     * Get all of the entities matching a name.
     *
     * @param name The name to be matched.
     * @return All of the matching entities.
     */
    public Collection<T> getAll(String name) {
      final Collection<T> entities = new LinkedList<>();

      for (T entity : this) {
        if (entity.getName().equals(name)) {
          entities.add(entity);
        }
      }

      return entities;
    }
        
  }

  /**
   * Gets the name associated with a code entity.
   *
   * @return The name String of this entity.
   */
  syn lazy String Entity.getName();

  eq Entity.getName() = getDeclarator().getName();

  /**
   * Links a code-entity to its declaration.
   *
   * @return The declaration associated to this entity.
   */
  inh lazy Declaration Entity.getDeclaration();

  eq Declaration.getChild().getDeclaration() = this;

}
