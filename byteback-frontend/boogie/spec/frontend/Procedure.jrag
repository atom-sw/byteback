import java.util.LinkedList;

/**
 * Methods and collections related to the {@link Procedure}
 * entities.
 */
aspect Procedure {

  /**
   * Procedures defined in the program.
   */
  coll EntityTable<Procedure> Program.procedures();

  ProcedureDeclaration contributes
    getProcedure() to Program.procedures();

  /**
   * Procedures calling this procedure.
   */
  coll LinkedList<Procedure> Procedure.callers();

  CallStatement contributes
    getProcedure() to Procedure.callers()
    for getAccessor().lookupProcedure().orElse(null);

  /**
   * Frame conditions used by procedure.
   */
  coll LinkedList<ValueReference> Procedure.frameConditions();

  FrameCondition contributes
    each getReferenceList() to Procedure.frameConditions()
    for getProcedure();

  /**
   * NTA definition of the {@link Procedure} fieled.
   */
  syn nta Procedure ProcedureDeclaration.getProcedure();

  eq ProcedureDeclaration.getProcedure() = new Procedure(getDeclarator());

  /**
   * Links statements to procedure.
   *
   * @return {@link Procedure} corresponding to this statement.
   */
  inh lazy Procedure Statement.getProcedure();

  /**
   * Links specifications to procedure.
   *
   * @return The {@link Procedure} corresponding to this specification.
   */
  inh lazy Procedure Specification.getProcedure();

  eq ProcedureDeclaration.getChild().getProcedure() = getProcedure();

  /**
   * Lookup procedure from this {@link Accessor}.
   *
   * @see Accessor#lookupProcedure(String)
   */
  syn lazy Optional<Procedure> Program.lookupProcedure(String name);

  eq Program.lookupProcedure(String name) = procedures().getFirst(name);

  inh lazy Optional<Procedure> Accessor.lookupProcedure(String name);

  eq Program.getChild().lookupProcedure(String name) = lookupProcedure(name);

  /**
   * Lookup procedure by the accessor's name.
   *
   * @see Accessor#lookupProcedure(String)
   */
  syn lazy Optional<Procedure> Accessor.lookupProcedure();

  eq Accessor.lookupProcedure() = lookupProcedure(getName());

  /**
   * Link procedure to declaration.
   *
   * @return The {@link ProcedureDeclaration} corresponding to this
   * procedure.
   */
  inh lazy ProcedureDeclaration Procedure.getProcedureDeclaration();

  eq ProcedureDeclaration.getChild().getProcedureDeclaration() = this;

  /**
   * Create targeted call with unbound arguments.
   *
   * @return A new {@link TargetedCallStatement} corresponding to this
   * procedure.
   */
  syn TargetedCallStatement Procedure.makeTargetedCall();
  
  eq Procedure.makeTargetedCall() = new TargetedCallStatement(
     getDeclarator().makeAccessor(), new List<>(), new List<>());

  /**
   * Link procedure to body.
   *
   * @return The {@link Body} corresponding to this procedure.
   */
  inh lazy Body Procedure.getBody();

  eq ProcedureDeclaration.getChild().getBody() = getBody();

  /**
   * Link procedure to specifications.
   *
   * @return The {@link Specification} list corresponding to this procedure.
   */
  inh lazy List<Specification> Procedure.getSpecificationList();

  eq ProcedureDeclaration.getChild().getSpecificationList() = getSpecificationList();

  /**
   * Check if procedures modifies a certain value reference.
   *
   * @param variable The variable that may be modified by this procedure.
   * @return {@code true} if this procedure modifies the variable.
   */
  syn lazy boolean Procedure.modifies(Variable variable);

  eq Procedure.modifies(Variable variable) {
    for (ValueReference reference : frameConditions()) {
      final Variable modified = reference.getAccessor().lookupRemoteVariable().orElse(null);

      if (variable.equals(modified)) {
        return true;
      }
    }

    return false;
  }

}
