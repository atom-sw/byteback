import java.util.Stack;
import java.util.HashSet;
import java.util.Set;

/**
 * Functions used to automatically infer `modify` conditions from the
 * assignments of global variables in the program.
 */
aspect ConditionInference {

	/**
	 * Adds a frame condition to this procedure, and to all the
	 * procedures that may call this procedure in the program.
	 *
	 * The function performs a BFS starting from this procedure, and
	 * considers a node "visited" if it already presents the frame
	 * condition. As such, calling this function multiple times on the
	 * same variable will not add more than one frame condition to the
	 * call-tree.
	 *
	 * @param modified The variable that is being modified by this procedure.
	 */
	public void Procedure.addFrameCondition(Variable modified) {
		final FrameCondition condition = new FrameCondition(new List<>(), false, new List<>(modified.makeValueReference()));
		final Stack<Procedure> next = new Stack<>();
		next.push(this);

		while (!next.isEmpty()) {
			final Procedure procedure = next.pop();

			if (!procedure.modifies(modified)) {
				final ProcedureDeclaration declaration = procedure.getProcedureDeclaration();
				declaration.addSpecification(condition.treeCopy());

				for (Procedure caller : procedure.callers()) {
					next.push(caller);
				}
			}
		}
	}

	/**
	 * Infer frame conditions for procedures that are modifying this
	 * variable.
	 */
	public void Variable.inferModifies() {
		for (AssignmentStatement assignment : assignments()) {
			assignment.getProcedure().addFrameCondition(this);
		}
	}

	public void Procedure.inferModifies() {
		for (Procedure caller : callers()) {
			for (ValueReference frameCondition : frameConditions()) {
				caller.addFrameCondition(frameCondition.getVariable());
			}
		}
	}

	/**
	 * Infer frame conditions for procedures that are modifying global
	 * variables in this program.
	 */
	public void Program.inferModifies() {
		for (Variable variable : variables()) {
			variable.inferModifies();
		}

		for (Procedure procedure : procedures()) {
			procedure.inferModifies();
		}
	}
	
}
