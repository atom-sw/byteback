import java.util.Optional;

/**
 * Methods and collections related to the {@link TypeDefinition}
 * entities.
 */
aspect Type {

  /**
   * Type definitions in the program.
   */
  coll EntityTable<TypeDefinition> Program.typeDefinitions();

  TypeDeclaration contributes getTypeDefinition() to Program.typeDefinitions();

  /**
   * NTA definition of the {@link TypeDefinition} attribute.
   */
  syn nta TypeDefinition TypeDeclaration.getTypeDefinition();

  eq TypeDeclaration.getTypeDefinition() {
    final DefinedType type = new DefinedType();
    final TypeDefinition typeDefinition = new TypeDefinition();
    typeDefinition.setDeclarator(getDeclarator());
    typeDefinition.setDefinedType(type);

    return typeDefinition;
  }

  eq TypeSynonymDeclaration.getTypeDefinition() {
    final TypeDefinition typeDefinition = super.getTypeDefinition();
    typeDefinition.setAliased(getAliased());

    return typeDefinition;
  }

  /**
   * Lookup type definition in program.
   */
  syn lazy Optional<TypeDefinition> Program.lookupTypeDefinition(String name);

  eq Program.lookupTypeDefinition(String name) = typeDefinitions().getFirst(name);

  inh lazy Optional<TypeDefinition> Accessor.lookupTypeDefinition(String name);

  eq Program.getChild().lookupTypeDefinition(String name) = lookupTypeDefinition(name);

  /**
   * Lookup {@link TypeDefinition} by the accessor's name.
   *
   * @return The {@link TypeDefinition} corresponding to this {@link
   * Accessor}.
   */
  syn lazy Optional<TypeDefinition> Accessor.type();

  eq Accessor.type() = lookupTypeDefinition(getName());

  /**
   * NTA definition of the {@link DefinedType} attribute.
   */
  syn nta DefinedType TypeDefinition.getType();

  eq TypeDefinition.getType() = new DefinedType();

  /**
   * Creates a new type access.
   *
   * @return A {@link TypeAccess} for this type.
   */
  syn TypeAccess Type.makeTypeAccess();

  eq BooleanType.makeTypeAccess() = new BooleanTypeAccess();

  eq IntegerType.makeTypeAccess() = new IntegerTypeAccess();

  eq RealType.makeTypeAccess() = new RealTypeAccess();

  eq MapType.makeTypeAccess() = new MapTypeAccess();

  eq BitvectorType.makeTypeAccess() = new BitvectorTypeAccess();

  syn UnknownTypeAccess DefinedType.makeTypeAccess();

  eq DefinedType.makeTypeAccess() = new UnknownTypeAccess(makeAccessor(), new List<>());

  /**
   * Create a new {@link Accessor} for this defined type. 
   *
   * @return The new {@link Accessor} instance.
   */
  inh Accessor DefinedType.makeAccessor();

  eq TypeDeclaration.getChild().makeAccessor() = new Accessor(getDeclarator().getName());

  /**
   * Creates an identifier from this type access.
   *
   * @return The String identifier for this {@link TypeAccess}.
   */
  syn lazy String TypeAccess.getIdentifier();

  eq BooleanTypeAccess.getIdentifier() = "bool";

  eq IntegerTypeAccess.getIdentifier() = "int";

  eq RealTypeAccess.getIdentifier() = "real";

  eq UnknownTypeAccess.getIdentifier() = getAccessor().getName();

  eq MapTypeAccess.getIdentifier() { throw new UnsupportedOperationException(); }

  eq BitvectorTypeAccess.getIdentifier() { throw new UnsupportedOperationException(); }

}
