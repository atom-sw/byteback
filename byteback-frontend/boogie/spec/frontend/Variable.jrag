import java.util.LinkedList;

/**
 * Methods and collections related to the {@link Variable}
 * entities.
 */
aspect Variable {

  /**
   * Interface for a {@link Variable} scope.
   */
  interface Scope {
    EntityTable<Variable> variables();
  }

  Program implements Scope;

  Function implements Scope;

  Procedure implements Scope;

  Implementation implements Scope;

  Body implements Scope;

  QuantifierExpression implements Scope;

  /**
   * Collections of variables defined in a {@link Scope}.
   */
  coll EntityTable<Variable> Scope.variables();

  Binding contributes
    each getVariableList() to Scope.variables()
    for getScope();

  /**
   * Getter for the scope associated with this binding.
   *
   * @return The {@link Scope} associated with this {@link Binding}.
   */
  inh Scope Binding.getScope();

  eq Program.getChild().getScope() = this;

  eq FunctionDeclaration.getChild().getScope() = getFunction();

  eq ProcedureDeclaration.getChild().getScope() = getProcedure();

  eq ImplementationDeclaration.getChild().getScope() = getImplementation();

  eq Body.getChild().getScope() = this;

  eq QuantifierExpression.getChild().getScope() = this;

  /**
   * Collection of references to this variable. 
   */
  coll LinkedList<ValueReference> Variable.references();

  ValueReference contributes
    this when getAccessor().lookupRemoteVariable().isPresent() to Variable.references()
    for getAccessor().lookupRemoteVariable()
      .orElse(null);

  /**
   * Collection of assignments to this variable.
   */
  coll LinkedList<AssignmentStatement> Variable.assignments();

  AssignmentStatement contributes
    this to Variable.assignments()
    for getTarget().getAccessor().lookupRemoteVariable()
      .orElse(null);

  /**
   * NTA definition of the {@link Variable} attribute.
   */
  syn nta List<Variable> Binding.getVariableList();
    
  eq OptionalBinding.getVariableList() {
    final List<Variable> variables = new List<>();

    if (hasDeclarator()) {
      variables.add(new Variable(getDeclarator()));
    }

    return variables;
  }

  eq SetBinding.getVariableList() {
    final List<Variable> variables = new List<>();

    for (Declarator declarator : getDeclaratorList()) {
      variables.add(new Variable(declarator));
    }

    return variables;
  }

  /**
   * Lookup variables locally.
   *
   * @param The name of the variable.
   * @return The local variable corresponding to the name.
   */
  syn lazy Optional<Variable> Scope.lookupLocalVariable(String name);

  eq Scope.lookupLocalVariable(String name) = variables().getFirst(name);

  /**
   * Lookup variables remotely.
   *
   * @param The name of the variable.
   * @return The remote variable corresponding to the name.
   */
  eq Program.getChild().lookupRemoteVariable(String name) {
    return lookupLocalVariable(name);
  }

  inh lazy Optional<Variable> FunctionDeclaration.lookupRemoteVariable(String name);

  eq FunctionDeclaration.getChild().lookupRemoteVariable(String name) {
    final Optional<Variable> localLookup = getFunction().lookupLocalVariable(name);

    if (!localLookup.isPresent()) {
      return lookupRemoteVariable(name);
    } else {
      return localLookup;
    }
  }

  inh lazy Optional<Variable> ProcedureDeclaration.lookupRemoteVariable(String name);

  eq ProcedureDeclaration.getChild().lookupRemoteVariable(String name) {
    final Optional<Variable> localLookup = getProcedure().lookupLocalVariable(name);

    if (!localLookup.isPresent()) {
      return lookupRemoteVariable(name);
    } else {
      return localLookup;
    }
  }

  inh lazy Optional<Variable> Body.lookupRemoteVariable(String name);

  eq Body.getChild().lookupRemoteVariable(String name) {
    final Optional<Variable> localLookup = lookupLocalVariable(name);

    if (!localLookup.isPresent()) {
      return lookupRemoteVariable(name);
    } else {
      return localLookup;
    }
  }

  /**
   * Lookup a remote variable from the Accessor.
   *
   * @see Program#lookupRemoteVariable(String)
   */
  inh lazy Optional<Variable> Accessor.lookupRemoteVariable(String name);

  syn lazy Optional<Variable> Accessor.lookupRemoteVariable();

  eq Accessor.lookupRemoteVariable() = lookupRemoteVariable(getName());

  /**
   * Get type access used in variable.
   */
  inh lazy TypeAccess Variable.getTypeAccess();

  eq Binding.getVariable().getTypeAccess() = getTypeAccess();

  /**
   * Get reference to variable.
   */
  syn ValueReference Variable.makeValueReference();

  eq Variable.makeValueReference() = new ValueReference(getDeclarator().makeAccessor());

  /**
   * Create optional binding from variable.
   */
  syn OptionalBinding Variable.makeOptionalBinding();

  eq Variable.makeOptionalBinding() = new OptionalBinding(getTypeAccess(), new Opt(getDeclarator()));

  /**
   * Fetch the constant declaration of the variable, if it has been defined as such.
   */
  inh lazy Optional<ConstantDeclaration> Variable.getConstantDeclaration();

  eq ConstantDeclaration.getBinding().getConstantDeclaration() = Optional.of(this);

  eq Program.getChild().getConstantDeclaration() = Optional.empty();

  inh lazy Optional<VariableDeclaration> Variable.getVariableDeclaration();

  eq VariableDeclaration.getBinding().getVariableDeclaration() = Optional.of(this);

  eq Program.getChild().getVariableDeclaration() = Optional.empty();

	syn Variable ValueReference.getVariable();

	eq ValueReference.getVariable() = getAccessor().lookupRemoteVariable().get();

  /**
   * Create variable declaration from reference.
   */
  syn VariableDeclaration ValueReference.makeVariableDeclaration(TypeAccess typeAccess);

  eq ValueReference.makeVariableDeclaration(TypeAccess typeAccess) =
    new VariableDeclaration(new List<>(), new List<>(new BoundedBinding(
      typeAccess, new List<>(getAccessor().makeDeclarator()), new Opt<>())));

  /**
   * Create assignee from reference.
   */
  syn Assignee ValueReference.makeAssignee();

  eq ValueReference.makeAssignee() =
		new Assignee(getAccessor());

  /**
   * Delete a variable and all of its assignments.
   */
  public void Variable.delete() {
    assert references().size() == 0 : "Only unreferenced variables can be deleted";

    for (AssignmentStatement statement : assignments()) {
      statement.delete();
    }

    getVariableDeclaration().get().delete();
  }

}
