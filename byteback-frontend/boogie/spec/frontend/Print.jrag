import java.util.Iterator;

/**
 * Methods used to pretty-print a Boogie AST.
 */
aspect Print {

	public interface Printable {

		void print(StringBuilder builder);

		default String print() {
			final StringBuilder builder = new StringBuilder();
			print(builder);
			return builder.toString();
		}

	}

	public class PrintUtil {
		static void listPrint(final StringBuilder builder, final String separator,
								final List<? extends Printable> list) {
			indentedListPrint(builder, separator, 0, list);
		}

		static void indentedListPrint(final StringBuilder builder, final String separator, final int level,
								final List<? extends Printable> list) {
			final Iterator<? extends Printable> iterator = list.iterator();

			while (iterator.hasNext()) {
				indent(builder, level);
				iterator.next().print(builder);

				if (iterator.hasNext()) {
					builder.append(separator);
				}
			}
		}

		static void indentedAppend(final StringBuilder builder, final int level, final String string) {
			indent(builder, level);
			builder.append(string);
		}

		static void indent(final StringBuilder builder, final int level) {
			for (int i = 0; i < level; ++i) {
				builder.append("  ");
			}
		}

	}

	Program implements Printable;

	public void Program.print(final StringBuilder builder) {
		PrintUtil.listPrint(builder, "\n\n", getDeclarationList());
	}

	Declaration implements Printable;

	public void Declaration.printAttributes(final StringBuilder builder) {
		PrintUtil.listPrint(builder, " ", getAttributeList());

		if (getAttributeList().getNumChild() > 0) {
			builder.append(" ");
		}
	}

	public void VariableDeclaration.print(final StringBuilder builder) {
		builder.append("var ");
		super.printAttributes(builder);
		PrintUtil.listPrint(builder, ", ", getBindingList());
		builder.append(";");
	}

	public void ConstantDeclaration.print(final StringBuilder builder) {
		builder.append("const ");
		super.printAttributes(builder);

		if (getUnique() != null && getUnique()) {
			builder.append("unique ");
		}

		getBinding().print(builder);

		if (hasOrderSpecification()) {
			builder.append(" ");
			getOrderSpecification().print(builder);
		}

		builder.append(";");
	}

	public void AxiomDeclaration.print(final StringBuilder builder) {
		builder.append("axiom ");
		super.printAttributes(builder);
		getExpression().print(builder);
		builder.append(";");
	}

	public void FunctionDeclaration.print(final StringBuilder builder) {
		builder.append("function ");
		super.printAttributes(builder);
		builder.append(getDeclarator().getName());
		getSignature().print(builder);

		if (hasExpression()) {
			builder.append(" { ");
			getExpression().print(builder);
			builder.append(" }");
		} else {
			builder.append(";");
		}
	}

	public void ProcedureDeclaration.print(final StringBuilder builder) {
		builder.append("procedure ");
		super.printAttributes(builder);
		builder.append(getDeclarator().getName());
		getSignature().print(builder);

		if (hasBody()) {
			builder.append("\n");
			PrintUtil.indentedListPrint(builder, "\n", 1, getSpecificationList());

			if (getSpecificationList().getNumChild() > 0) {
				builder.append("\n");
			}

			getBody().print(builder);
		} else {
			builder.append(";");

			if (getSpecificationList().getNumChild() > 0) {
				builder.append("\n");
				PrintUtil.indentedListPrint(builder, "\n", 1, getSpecificationList());
			}
		}
	}

	public void ImplementationDeclaration.print(final StringBuilder builder) {
		builder.append("implementation ");
		super.printAttributes(builder);
		builder.append(getDeclarator().getName());
		getSignature().print(builder);
		builder.append("\n");
		PrintUtil.listPrint(builder, "\n", getBodyList());
	}

	public void TypeDeclaration.print(final StringBuilder builder) {
		builder.append("type ");
		super.printAttributes(builder);
	}

	public void TypeConstructorDeclaration.print(final StringBuilder builder) {
		super.print(builder);

		if (getFinite()) {
			builder.append("finite ");
		}

		builder.append(getDeclarator().getName());

		if (getTypeParameterList().getNumChild() > 0) {
			builder.append(" ");
			PrintUtil.listPrint(builder, ", ", getTypeParameterList());
		}

		builder.append(";");
	}

	public void TypeSynonymDeclaration.print(final StringBuilder builder) {
		super.print(builder);
		builder.append(getDeclarator().getName());
		builder.append(" ");
		PrintUtil.listPrint(builder, ", ", getTypeParameterList());
		builder.append(" = ");
		getAliased().print(builder);
		builder.append(";");
	}

	TypeParameter implements Printable;

	public void TypeParameter.print(final StringBuilder builder) {
		getDeclarator().print(builder);
	}

	Signature implements Printable;

	public void Signature.print(final StringBuilder builder) {
		if (getTypeParameterList().getNumChild() > 0) {
			builder.append("<");
			PrintUtil.listPrint(builder, ", ", getTypeParameterList());
			builder.append(">");
		}

		builder.append("(");
		PrintUtil.listPrint(builder, ", ", getInputBindingList());
		builder.append(")");
		builder.append(" returns ");
		builder.append("(");
		PrintUtil.listPrint(builder, ", ", getOutputBindingList());
		builder.append(")");
	}

	OrderSpecification implements Printable;

	public void OrderSpecification.print(final StringBuilder builder) {
		builder.append("<: ");
		PrintUtil.listPrint(builder, ", ", getParentEdgeList());
	}

	ParentEdge implements Printable;

	public void ParentEdge.print(final StringBuilder builder) {
		if (getUnique()) {
			builder.append("unique ");
		}

		getParentConstant().print(builder);
	}

	Binding implements Printable;

	public void SetBinding.print(final StringBuilder builder) {
		PrintUtil.listPrint(builder, ", ", getDeclaratorList());
		builder.append(" : ");
		getTypeAccess().print(builder);
	}

	public void OptionalBinding.print(final StringBuilder builder) {
		if (hasDeclarator()) {
			getDeclarator().print(builder);
			builder.append(" : ");
		}

		getTypeAccess().print(builder);
	}

	public void BoundedBinding.print(final StringBuilder builder) {
		super.print(builder);

		if (hasWhereClause()) {
			getWhereClause().print(builder);
		}
	}

	WhereClause implements Printable;

	public void WhereClause.print(final StringBuilder builder) {
		builder.append(" where ");
		getExpression().print(builder);
	}

	TypeAccess implements Printable;

	public void BooleanTypeAccess.print(final StringBuilder builder) {
		builder.append("bool");
	}

	public void IntegerTypeAccess.print(final StringBuilder builder) {
		builder.append("int");
	}

	public void RealTypeAccess.print(final StringBuilder builder) {
		builder.append("real");
	}

	public void BitvectorTypeAccess.print(final StringBuilder builder) {
		builder.append(getDefinition());
	}

	public void UnknownTypeAccess.print(final StringBuilder builder) {
		getAccessor().print(builder);

		if (getArgumentList().getNumChild() > 0) {
			builder.append(" (");
			PrintUtil.listPrint(builder, " ", getArgumentList());
			builder.append(")");
		}
	}

	public void MapTypeAccess.print(final StringBuilder builder) {
		if (getTypeParameterList().getNumChild() > 0) {
			builder.append("<");
			PrintUtil.listPrint(builder, ", ", getTypeParameterList());
			builder.append(">");
		}

		builder.append("[");
		PrintUtil.listPrint(builder, ", ", getKeyTypeList());
		builder.append("]");
		getValueType().print(builder);
	}

	Option implements Printable;

	public void Trigger.print(final StringBuilder builder) {
		if (getExpressionList().getNumChild() > 0) {
			builder.append("{");
			PrintUtil.listPrint(builder, ", ", getExpressionList());
			builder.append("}");
		}
	}

	public void Attribute.print(final StringBuilder builder) {
		builder.append("{");
		builder.append(":");
		builder.append(getName());
		builder.append(" ");
		PrintUtil.listPrint(builder, ", ", getArgumentList());
		builder.append("}");
	}

	Meta implements Printable;

	public void Star.print(final StringBuilder builder) {
		builder.append("*");
	}

	Expression implements Printable;

	public void CoercionOperation.print(final StringBuilder builder) {
		builder.append("(");
		getOperand().print(builder);
		builder.append(" : ");
		getTarget().print(builder);
		builder.append(")");
	}

	public void ConditionalOperation.print(final StringBuilder builder) {
		builder.append("if ");
		getCondition().print(builder);
		builder.append(" then ");
		getThen().print(builder);
		builder.append(" else ");
		getElse().print(builder);
	}

	public void Literal.print(final StringBuilder builder) {
		builder.append(getValue());
	}

	public void StringLiteral.print(final StringBuilder builder) {
		builder.append("\"");
		builder.append(getValue());
		builder.append("\"");
	}

	public void BinaryExpression.print(final StringBuilder builder) {
		builder.append("(");
		printLeftOperand(builder);
		builder.append(" ");
		printOperator(builder);
		builder.append(" ");
		printRightOperand(builder);
		builder.append(")");
	}

	public void BinaryExpression.printLeftOperand(final StringBuilder builder) {
		getLeftOperand().print(builder);
	}

	public void BinaryExpression.printRightOperand(final StringBuilder builder) {
		getRightOperand().print(builder);
	}

	public abstract void BinaryExpression.printOperator(final StringBuilder builder);

	public void EquivalenceOperation.printOperator(final StringBuilder builder) {
		builder.append("<==>");
	}

	public void ImplicationOperation.printOperator(final StringBuilder builder) {
		builder.append("==>");
	}

	public void AndOperation.printOperator(final StringBuilder builder) {
		builder.append("&&");
	}

	public void OrOperation.printOperator(final StringBuilder builder) {
		builder.append("||");
	}

	public void EqualsOperation.printOperator(final StringBuilder builder) {
		builder.append("==");
	}

	public void NotEqualsOperation.printOperator(final StringBuilder builder) {
		builder.append("!=");
	}

	public void LessThanOperation.printOperator(final StringBuilder builder) {
		builder.append("<");
	}

	public void GreaterThanOperation.printOperator(final StringBuilder builder) {
		builder.append(">");
	}

	public void GreaterThanEqualsOperation.printOperator(final StringBuilder builder) {
		builder.append(">=");
	}

	public void LessThanEqualsOperation.printOperator(final StringBuilder builder) {
		builder.append("<=");
	}

	public void PartialOrderOperation.printOperator(final StringBuilder builder) {
		builder.append("<:");
	}

	public void AdditionOperation.printOperator(final StringBuilder builder) {
		builder.append("+");
	}

	public void SubtractionOperation.printOperator(final StringBuilder builder) {
		builder.append("-");
	}

	public void MultiplicationOperation.printOperator(final StringBuilder builder) {
		builder.append("*");
	}

	public void RealDivisionOperation.printOperator(final StringBuilder builder) {
		builder.append("/");
	}

	public void IntegerDivisionOperation.printOperator(final StringBuilder builder) {
		builder.append("div");
	}

	public void ModuloOperation.printOperator(final StringBuilder builder) {
		builder.append("mod");
	}

	public void ConcatenationOperation.printOperator(final StringBuilder builder) {
		builder.append("++");
	}

	public void NegationOperation.print(final StringBuilder builder) {
		builder.append("!");
		getOperand().print(builder);
	}

	public void MinusOperation.print(final StringBuilder builder) {
		builder.append("-");
		getOperand().print(builder);
	}

	public void MapAccessOperation.print(final StringBuilder builder) {
		getOperand().print(builder);
		getSelect().print(builder);
	}

	public void MapRangedAccessOperation.print(final StringBuilder builder) {
		getOperand().print(builder);
		builder.append("[");
		builder.append(getRangeStart());
		builder.append(getRangeEnd());
		builder.append("]");
	}

	public void MapUpdateOperation.print(final StringBuilder builder) {
		getOperand().print(builder);
		builder.append("[");
		PrintUtil.listPrint(builder, ", ", getSelect().getExpressionList());
		builder.append(" := ");
		getUpdate().print(builder);
		builder.append("]");
	}

	public void SymbolicReference.print(final StringBuilder builder) {
		getAccessor().print(builder);
	}

	public void FunctionReference.print(final StringBuilder builder) {
		super.print(builder);
		builder.append("(");
		PrintUtil.listPrint(builder, ", ", getArgumentList());
		builder.append(")");
	}

	public void OldReference.print(final StringBuilder builder) {
		builder.append("old(");
		getArgument().print(builder);
		builder.append(")");
	}

	public void IntConversionReference.print(final StringBuilder builder) {
		builder.append("int(");
		getArgument().print(builder);
		builder.append(")");
	}

	public void RealConversionReference.print(final StringBuilder builder) {
		builder.append("real(");
		getArgument().print(builder);
		builder.append(")");
	}

	public void QuantifierExpression.print(final StringBuilder builder) {
		builder.append("(");
		getQuantifier().print(builder);
		builder.append(" ");

		if (getTypeParameterList().getNumChild() > 0) {
			builder.append("<");
			PrintUtil.listPrint(builder, ", ", getTypeParameterList());
			builder.append(">");
			builder.append(" ");
		}

		PrintUtil.listPrint(builder, ", ", getBindingList());
		builder.append(" :: ");

		if (getOptionList().getNumChild() > 0) {
			PrintUtil.listPrint(builder, ", ", getOptionList());
			builder.append(" ");
		}

		getOperand().print(builder);
		builder.append(")");
	}

	Quantifier implements Printable;

	public void UniversalQuantifier.print(final StringBuilder builder) {
		builder.append("forall");
	}

	public void ExistentialQuantifier.print(final StringBuilder builder) {
		builder.append("exists");
	}

	Statement implements Printable;

	public void Statement.print(final StringBuilder builder) {
		builder.append(this);
	}

	public void Statement.indentedPrint(final StringBuilder builder, final int level) {
		PrintUtil.indent(builder, level);
		print(builder);
	}

	public void AssertStatement.print(final StringBuilder builder) {
		builder.append("assert ");
		PrintUtil.listPrint(builder, ", ", getAttributeList());
		getExpression().print(builder);
		builder.append(";");
	}

	public void AssumeStatement.print(final StringBuilder builder) {
		builder.append("assume ");
		getExpression().print(builder);
		builder.append(";");
	}

	public void HavocStatement.print(final StringBuilder builder) {
		builder.append("havoc ");
		PrintUtil.listPrint(builder, ", ", getReferenceList());
		builder.append(";");
	}

	public void AssignmentStatement.print(final StringBuilder builder) {
		getTarget().print(builder);
		builder.append(" := ");
		getSource().print(builder);
		builder.append(";");
	}

	public void CallStatement.print(final StringBuilder builder) {
		builder.append("call");
	}

	public void TargetedCallStatement.print(final StringBuilder builder) {
		super.print(builder);
		builder.append(" ");

		if (getTargetList().getNumChild() > 0) {
			PrintUtil.listPrint(builder, ", ", getTargetList());
			builder.append(" := ");
		}

		getAccessor().print(builder);
		builder.append("(");
		PrintUtil.listPrint(builder, ", ", getArgumentList());
		builder.append(")");
		builder.append(";");
	}

	public void UniversalCallStatement.print(final StringBuilder builder) {
		super.print(builder);
		builder.append(" forall ");
		getAccessor().print(builder);
		builder.append("(");
		PrintUtil.listPrint(builder, ", ", getArgumentList());
		builder.append(")");
		builder.append(";");
	}

	public void BlockStatement.indentedPrint(final StringBuilder builder, final int level) {
		final Iterator<Statement> statementIterator = getStatementList().iterator();
		builder.append("{\n");

		while (statementIterator.hasNext()) {
			statementIterator.next().indentedPrint(builder, level + 1);
			builder.append("\n");
		}
				
		PrintUtil.indentedAppend(builder, level, "}");
	}

	public void BlockStatement.print(final StringBuilder builder) {
		indentedPrint(builder, 0);
	}

	public void ExtensionPoint.indentedPrint(final StringBuilder builder, final int level) {
		final Iterator<Statement> statementIterator = getStatementList().iterator();
		
		while (statementIterator.hasNext()) {
			statementIterator.next().indentedPrint(builder, level);
			builder.append("\n");
		}

		builder.deleteCharAt(builder.length() - 1);
	}

	public void ExtensionPoint.print(final StringBuilder builder) {
		indentedPrint(builder, 0);
	}

	public void IfStatement.indentedPrint(final StringBuilder builder, final int level) {
		PrintUtil.indentedAppend(builder, level, "if (");
		getCondition().print(builder);
		builder.append(") ");
		getThen().indentedPrint(builder, level);

		if (hasElse()) {
			builder.append(" else ");
			getElse().indentedPrint(builder, level);
		}
	}

	public void IfStatement.print(final StringBuilder builder) {
		indentedPrint(builder, 0);
	}

	public void WhileStatement.indentedPrint(final StringBuilder builder, final int level) {
		PrintUtil.indentedAppend(builder, level, "while (");
		getCondition().print(builder);
		builder.append(")\n");
		PrintUtil.indentedListPrint(builder, "\n", level + 1, getInvariantList());
		builder.append("\n");
		getBlock().indentedPrint(builder, level);
	}

	public void WhileStatement.print(final StringBuilder builder, final int level) {
		indentedPrint(builder, 0);
	}

	public void BreakStatement.print(final StringBuilder builder) {
		builder.append("break;");
	}

	public void ReturnStatement.print(final StringBuilder builder) {
		builder.append("return;");
	}

	public void GotoStatement.print(final StringBuilder builder) {
		builder.append("goto ");
		getLabel().print(builder);
		builder.append(";");
	}

	public void LabelStatement.indentedPrint(final StringBuilder builder, final int level) {
		// Skip indentation.
		print(builder);
	}

	public void LabelStatement.print(final StringBuilder builder) {
		getLabel().print(builder);
		builder.append(":");
	}

	Label implements Printable;

	public void Label.print(final StringBuilder builder) {
		builder.append(getTarget());
	}

	Assignee implements Printable;

	public void Assignee.print(final StringBuilder builder) {
		getAccessor().print(builder);
	}

	public void MapAssignee.print(final StringBuilder builder) {
		super.print(builder);
		getSelect().print(builder);
	}

	Body implements Printable;

	public void Body.print(final StringBuilder builder) {
		final Iterator<VariableDeclaration> localIterator = getLocalDeclarationList().iterator();
		final Iterator<Statement> statementIterator = getStatementList().iterator();

		builder.append("{\n");

		while (localIterator.hasNext()) {
			builder.append("  ");
			localIterator.next().print(builder);
			builder.append("\n");
		}

		while (statementIterator.hasNext()) {
			statementIterator.next().indentedPrint(builder, 1);

			if (statementIterator.hasNext()) {
				builder.append("\n");
			}
		}
				
		builder.append("\n}");
	}

	MapSelect implements Printable;

	public void MapSelect.print(final StringBuilder builder) {
		builder.append("[");
		PrintUtil.listPrint(builder, ", ", getExpressionList());
		builder.append("]");
	}

	Declarator implements Printable;

	public void Declarator.print(final StringBuilder builder) {
		builder.append(getName());
	}

	Accessor implements Printable;

	public void Accessor.print(final StringBuilder builder) {
		builder.append(getName());
	}

	Specification implements Printable;

	public void Specification.print(final StringBuilder builder) {
		if (getFree() != null && getFree()) {
			builder.append("free ");
		}
	}

	public void PreCondition.print(final StringBuilder builder) {
		super.print(builder);
		builder.append("requires ");
		PrintUtil.listPrint(builder, ", ", getAttributeList());
		getExpression().print(builder);
		builder.append(";");
	}

	public void PostCondition.print(final StringBuilder builder) {
		super.print(builder);
		builder.append("ensures ");
		PrintUtil.listPrint(builder, ", ", getAttributeList());
		getExpression().print(builder);
		builder.append(";");
	}

	public void FrameCondition.print(final StringBuilder builder) {
		super.print(builder);
		builder.append("modifies ");
		PrintUtil.listPrint(builder, ", ", getAttributeList());
		PrintUtil.listPrint(builder, ", ", getReferenceList());
		builder.append(";");
	}

	public void LoopInvariant.print(final StringBuilder builder) {
		super.print(builder);
		builder.append("invariant ");
		PrintUtil.listPrint(builder, ", ", getAttributeList());
		getExpression().print(builder);
		builder.append(";");
	}

}
