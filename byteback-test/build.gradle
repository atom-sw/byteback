import java.nio.file.Paths

evaluationDependsOn(':byteback-tool')

def scriptsDir = "$projectDir/benchmark"

def bytebackTestRoot = project(':byteback-test').projectDir

def tool = project(':byteback-tool')

subprojects { test ->


		def toolRoot = tool.installDist.destinationDir

		def summaryDir = "$buildDir/summary"

		def system = tasks.register('system') {
				dependsOn tool.installDist
				dependsOn test.shadowJar

				def sourceSet = project.sourceSets.main
				def sourceDirs = sourceSet.allSource.srcDirs
				def compiledDirs = sourceSet.output.classesDirs
				def testDirs = ["java", "scala", "kotlin"]
				def targetProperty = project.findProperty("TEST_TARGET")
				def jobsProperty = project.findProperty("TEST_JOBS")
				def boogieTimeLimitProperty = project.findProperty("BOOGIE_TIME_LIMIT")
				def compiledDir = null;
				def specCompiledDir = project(':byteback-specification').sourceSets.main.output.classesDirs.first()
				def sourceDir = null;
				def specSourceDir = project(':byteback-specification').sourceSets.main.java.srcDirs.first()

				def execute = { target ->
						test.exec {
								environment 'SUMMARY', project.mkdir(summaryDir)
								environment 'SRC_BASE', sourceDir
								environment 'SRC_SPEC_BASE', specSourceDir
								environment 'CLASS_BASE', compiledDir
								environment 'SPEC_CLASS_BASE', specCompiledDir
								environment 'BYTEBACK_ROOT', toolRoot
								environment 'TEST_JAR', project.shadowJar.archivePath
								environment 'BOOGIE_TIME_LIMIT', boogieTimeLimitProperty
								commandLine 'lit', target, '-a', '-j', jobsProperty
						}
				}

				if (jobsProperty == null) {
						jobsProperty = 4
				}

				if (boogieTimeLimitProperty == null) {
						boogieTimeLimitProperty = 20
				}

				compiledDirs.each { dir -> if (dir.exists()) compiledDir = dir }

				doLast {
						compiledDirs.each { dir ->
								if (dir.exists())
										compiledDir = dir
						}
						sourceDirs.each { dir ->
								if (testDirs.contains(dir.getName()) && dir.exists()) {
										sourceDir = dir

										if (targetProperty == null) {
												execute(dir)
										} else {
												def targetPath = Paths.get(bytebackTestRoot.getCanonicalPath(), targetProperty as String).normalize()
												if (targetPath.startsWith(test.projectDir.getCanonicalPath())) {
														execute(targetPath)
												}
										}
								}
						}
				}
		}

		def experimentsDir = "$buildDir/experiments"

		def experiments = tasks.register('experiments') {
				def jar = test.shadowJar.archivePath
				def script = "$scriptsDir/run-experiments.py"
				def repetitionsProperty = project.findProperty("EXP_REPETITIONS")

				if (repetitionsProperty == null) {
						repetitionsProperty = 5
				}

				doLast {
						test.exec {
								def output = "$experimentsDir/results.csv"
								environment 'BYTEBACK_ROOT', toolRoot
								project.mkdir(experimentsDir)
								commandLine 'python3', script,
										'--output', output,
										'--repetitions', repetitionsProperty,
										'--summary', "$summaryDir/summary.csv"
						}
				}

				outputs.files fileTree(experimentsDir).matching {
						include '*.csv'
				} 

				dependsOn test.system
		}

}

def results = tasks.register('results') {
		def experimentsDir = "$buildDir/experiments"
		def script = "$scriptsDir/format-results.sh"

		doLast {
				project.mkdir(experimentsDir)

				project.exec {
						commandLine 'sh', script
				}
		}

		outputs.files fileTree(experimentsDir).matching {
				include '*.csv'
				include '*.tex'
		} 

		subprojects { test ->
				dependsOn test.experiments
		}
}
